# ********RoostGPT********

# Test generated by RoostGPT for test karate-vtal-appointment using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /appointment_post for http method type POST 
# RoostTestHash=b7eaf9bc25
# 
# 

# ********RoostGPT********
Feature: Appointment API

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']

  Scenario: Create a new appointment successfully
    Given path '/appointment'
    And header Authorization = authToken
    And request
      """
      {
        "appointment": {
          "slot": {
            "id": "bff13821-73c3-42cc-9327-b05c7df5a67f"
          },
          "reason": "Agendamento para Instalação de Fibra"
        }
      }
      """
    When method POST
    Then status 201
    And match response.control.type == 'S'
    And match response.control.code == '201'
    And match response.control.message == 'Created'
    And match response.appointment.id == '#string'
    And match response.appointment.startDate == '#string'
    And match response.appointment.finishDate == '#string'

  Scenario: Create appointment with invalid slot ID
    Given path '/appointment'
    And header Authorization = authToken
    And request
      """
      {
        "appointment": {
          "slot": {
            "id": "invalid-slot-id"
          },
          "reason": "Agendamento para Instalação de Fibra"
        }
      }
      """
    When method POST
    Then status 404
    And match response.control.type == 'E'
    And match response.control.code == '404'
    And match response.control.message contains 'Identificador do Slot não encontrado ou expirado'

  Scenario: Create appointment with missing required fields
    Given path '/appointment'
    And header Authorization = authToken
    And request
      """
      {
        "appointment": {
          "reason": "Agendamento para Instalação de Fibra"
        }
      }
      """
    When method POST
    Then status 400
    And match response.control.type == 'E'
    And match response.control.code == '400'
    And match response.control.message == 'Bad Request'

  Scenario: Create appointment with unauthorized priority
    Given path '/appointment'
    And header Authorization = authToken
    And request
      """
      {
        "appointment": {
          "slot": {
            "id": "bff13821-73c3-42cc-9327-b05c7df5a67f"
          },
          "reason": "Agendamento para Instalação de Fibra",
          "priority": {
            "flag": true,
            "reason": "Cliente Diamond"
          }
        }
      }
      """
    When method POST
    Then status 401
    And match response.control.type == 'E'
    And match response.control.code == '401'
    And match response.control.message == 'Priorização de agendamento não autorizado'

  Scenario: Create appointment without authentication token
    Given path '/appointment'
    And request
      """
      {
        "appointment": {
          "slot": {
            "id": "bff13821-73c3-42cc-9327-b05c7df5a67f"
          },
          "reason": "Agendamento para Instalação de Fibra"
        }
      }
      """
    When method POST
    Then status 401
    And match response.control.type == 'E'
    And match response.control.code == '401'
    And match response.control.message == 'Unauthorized'
