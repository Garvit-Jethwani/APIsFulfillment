# ********RoostGPT********

# Test generated by RoostGPT for test karate-vtal-appointment using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /appointment/{appointmentId}_patch for http method type PATCH 
# RoostTestHash=33f5f2e325
# 
# 

# ********RoostGPT********
Feature: Test /appointment/{appointmentId} endpoint

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']

  Scenario: Patch Appointment with valid data
    * def appointmentId = 'SA-562403'
    * def requestBody =
      """
      {
        "appointment": {
          "slot": {
            "id": "bff13821-73c3-42cc-9327-b05c7df5a67f"
          },
          "reason": "Agendamento para Instalação de Fibra"
        }
      }
      """
    Given path '/appointment/' + appointmentId
    And header Authorization = 'Bearer ' + authToken
    And request requestBody
    When method PATCH
    Then status 200
    And match response.control.type == 'S'
    And match response.control.code == 201
    And match response.control.message == 'Created'
    And match response.appointment.id == appointmentId

  Scenario: Patch Appointment with invalid appointmentId
    * def appointmentId = 'INVALID_ID'
    * def requestBody =
      """
      {
        "appointment": {
          "slot": {
            "id": "bff13821-73c3-42cc-9327-b05c7df5a67f"
          },
          "reason": "Agendamento para Instalação de Fibra"
        }
      }
      """
    Given path '/appointment/' + appointmentId
    And header Authorization = 'Bearer ' + authToken
    And request requestBody
    When method PATCH
    Then status 404
    And match response.control.type == 'E'
    And match response.control.code == 404
    And match response.control.message == 'Not Found'

  Scenario: Patch Appointment with invalid slot id
    * def appointmentId = 'SA-562403'
    * def requestBody =
      """
      {
        "appointment": {
          "slot": {
            "id": "INVALID_SLOT_ID"
          },
          "reason": "Agendamento para Instalação de Fibra"
        }
      }
      """
    Given path '/appointment/' + appointmentId
    And header Authorization = 'Bearer ' + authToken
    And request requestBody
    When method PATCH
    Then status 404
    And match response.control.type == 'E'
    And match response.control.code == 404
    And match response.control.message == 'Identificador do Slot não encontrado ou expirado'

  Scenario: Patch Appointment with unauthorized access
    * def appointmentId = 'SA-562403'
    * def requestBody =
      """
      {
        "appointment": {
          "slot": {
            "id": "bff13821-73c3-42cc-9327-b05c7df5a67f"
          },
          "reason": "Agendamento para Instalação de Fibra"
        }
      }
      """
    Given path '/appointment/' + appointmentId
    And request requestBody
    When method PATCH
    Then status 401
    And match response.control.type == 'E'
    And match response.control.code == 401
    And match response.control.message == 'Unauthorized'

  Scenario: Patch Appointment with invalid request body
    * def appointmentId = 'SA-562403'
    * def requestBody =
      """
      {
        "invalid": "data"
      }
      """
    Given path '/appointment/' + appointmentId
    And header Authorization = 'Bearer ' + authToken
    And request requestBody
    When method PATCH
    Then status 400
    And match response.control.type == 'E'
    And match response.control.code == 400
    And match response.control.message == 'Bad Request'
