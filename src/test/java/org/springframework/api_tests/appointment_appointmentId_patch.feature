# ********RoostGPT********

# Test generated by RoostGPT for test karate-vtal-appointment using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /appointment/{appointmentId}_patch for http method type PATCH 
# RoostTestHash=33f5f2e325
# 
# 

# ********RoostGPT********
Feature: Update Appointment

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { Authorization: '#(karate.properties['AUTH_TOKEN'])' }

  Scenario Outline: Update an existing appointment with valid data
    Given path '/appointment/<appointmentId>'
    And request
      """
      {
        "appointment": {
          "slot": {
            "id": "<slotId>"
          },
          "reason": "<reason>"
        }
      }
      """
    When method PATCH
    Then status 200
    And match response ==
      """
      {
        "order": {
          "type": "#string",
          "associatedDocument": "#string",
          "addressChange": {
            "flag": "#boolean"
          }
        },
        "customer": {
          "subscriberId": "#string"
        },
        "appointment": {
          "id": "#string",
          "startDate": "#string",
          "finishDate": "#string",
          "priority": {
            "flag": "#boolean",
            "reason": "##string"
          }
        },
        "address": {
          "id": "#number"
        },
        "products": {
          "product": [
            {
              "type": "#string"
            }
          ]
        },
        "control": {
          "type": "#string",
          "message": "#string",
          "code": "#string"
        }
      }
      """
    And match response.control.type == 'S'
    And match response.control.code == '201'
    And match response.control.message == 'Created'

    Examples:
      | read('appointment_appointmentId_patch.csv') |

  Scenario: Update appointment with invalid slot id
    Given path '/appointment/SA-562403'
    And request
      """
      {
        "appointment": {
          "slot": {
            "id": "invalid-slot-id"
          },
          "reason": "Agendamento para Instalação de Fibra"
        }
      }
      """
    When method PATCH
    Then status 404
    And match response ==
      """
      {
        "control": {
          "type": "E",
          "code": "404",
          "message": "Identificador do Slot não encontrado ou expirado"
        }
      }
      """

  Scenario: Update appointment with invalid appointment id
    Given path '/appointment/invalid-appointment-id'
    And request
      """
      {
        "appointment": {
          "slot": {
            "id": "bff13821-73c3-42cc-9327-b05c7df5a67f"
          },
          "reason": "Agendamento para Instalação de Fibra"
        }
      }
      """
    When method PATCH
    Then status 404
    And match response ==
      """
      {
        "control": {
          "type": "E",
          "code": "404",
          "message": "Not Found"
        }
      }
      """

  Scenario: Update appointment without authorization token
    Given path '/appointment/SA-562403'
    And request
      """
      {
        "appointment": {
          "slot": {
            "id": "bff13821-73c3-42cc-9327-b05c7df5a67f"
          },
          "reason": "Agendamento para Instalação de Fibra"
        }
      }
      """
    * configure headers = null
    When method PATCH
    Then status 401
    And match response ==
      """
      {
        "control": {
          "type": "E",
          "code": "401",
          "message": "Unauthorized"
        }
      }
      """
