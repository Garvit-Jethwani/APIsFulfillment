# ********RoostGPT********

# Test generated by RoostGPT for test karate-vtal-appointment using AI Type Claude AI and AI Model claude-3-opus-20240229
# 
# Feature file generated for /appointment/{appointmentId}_patch for http method type PATCH 
# RoostTestHash=33f5f2e325
# 
# 

# ********RoostGPT********
Feature: Update Appointment API

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']
    * configure headers = { 'Authorization': '#(authToken)' }

  Scenario Outline: Update Appointment with valid data
    * def requestBody = read('classpath:examples/updateAppointment.json')
    * set requestBody.appointment.slot.id = '<slotId>'
    * set requestBody.appointment.reason = '<reason>'
    Given path '/appointment/<appointmentId>'
    And request requestBody
    When method PATCH
    Then status 200
    And match response.control.type == 'S'
    And match response.control.code == 201
    And match response.control.message == 'Created'
    And match response.appointment.id == '<appointmentId>'
    And match response.appointment.startDate == '#notnull'
    And match response.appointment.finishDate == '#notnull'

    Examples:
      | read('appointment_appointmentId_patch.csv') |

  Scenario: Update Appointment with invalid appointmentId
    * def requestBody = read('classpath:examples/updateAppointment.json')
    Given path '/appointment/invalid-id'
    And request requestBody
    When method PATCH
    Then status 404
    And match response.control.type == 'E'
    And match response.control.code == 404
    And match response.control.message == 'Not Found'

  Scenario: Update Appointment with expired slotId
    * def requestBody = read('classpath:examples/updateAppointment.json')
    * set requestBody.appointment.slot.id = 'expired-slot-id'
    Given path '/appointment/SA-562403'
    And request requestBody
    When method PATCH
    Then status 404
    And match response.control.type == 'E'
    And match response.control.code == 404
    And match response.control.message == 'Identificador do Slot não encontrado ou expirado'

  Scenario: Update Appointment with unauthorized priority
    * def requestBody = read('classpath:examples/updateAppointment.json')
    * set requestBody.appointment.priority.flag = true
    * set requestBody.appointment.priority.reason = 'Cliente Diamond'
    Given path '/appointment/SA-562403'
    And request requestBody
    When method PATCH
    Then status 401
    And match response.control.type == 'E'
    And match response.control.code == 401
    And match response.control.message == 'Priorização de agendamento não autorizado'

  Scenario: Update Appointment with locked appointment
    * def requestBody = read('classpath:examples/updateAppointment.json')
    Given path '/appointment/SA-562403'
    And request requestBody
    When method PATCH
    Then status 423
    And match response.control.type == 'E'
    And match response.control.code == 423
    And match response.control.message == 'Agendamento não pode ser alterado'
